{"version":3,"sources":["Box.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","callus","bind","assertThisInitialized","callme","index","i","j","x","ons","backgroundColor","react_default","a","createElement","className","style","onClick","Component","defaultProps","Board","state","current","allotCurrent","gameWon","changeOn","changeNeighbours","restartGame","setState","nrows","y","ncols","Math","random","chanceLit","push","_this2","st","every","e","el","h","k","_this3","split","color","animation","map","key","ele","src_Box_0","concat","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87875b2f.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './Box.css';\r\n\r\nclass Box extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.callus = this.callus.bind(this);\r\n  }\r\n\r\n  static defaultProps = {\r\n    ons: false,\r\n  };\r\n\r\n  callus() {\r\n    this.props.callme(this.props.index.i,this.props.index.j);\r\n  }\r\n\r\n  render() {\r\n    var x = {};\r\n    this.props.ons?x={'backgroundColor': '#f96db6'}:x={'backgroundColor': '#7d848e'};\r\n    return(\r\n      <div className=\"box\" style={x} onClick={this.callus}></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Box;\r\n","import React,{Component} from 'react';\r\nimport Box from './Box';\r\nimport './Board.css';\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    nrows: 4,\r\n    ncols: 4,\r\n    chanceLit: 0.2\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      current : this.allotCurrent(),\r\n      gameWon: false\r\n    }\r\n    this.changeOn = this.changeOn.bind(this);\r\n    this.changeNeighbours = this.changeNeighbours.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n  }\r\n\r\n  restartGame() {\r\n    this.setState({\r\n      current : this.allotCurrent(),\r\n      gameWon: false\r\n    });\r\n\r\n  }\r\n\r\n  allotCurrent() {\r\n    let x =[];\r\n    for(var i=0;i<this.props.nrows;i++){\r\n      let y=[];\r\n      for(var j=0;j<this.props.ncols;j++){\r\n        if(Math.random()<this.props.chanceLit)\r\n          y.push(true);\r\n        else\r\n          y.push(false);\r\n      }\r\n      x.push(y);\r\n    }\r\n    return x;\r\n  }\r\n\r\n  changeOn (i,j) {\r\n    this.setState(st => {\r\n      var x = st.current;\r\n      if(i>=0&&j>=0&&i<(this.props.nrows)&&j<(this.props.ncols))\r\n        x[i][j] = !st.current[i][j];\r\n      let y=x.every((e) => e.every(el => !el));\r\n      return({current: x, gameWon: y});\r\n    });\r\n  }\r\n\r\n  changeNeighbours (i,j) {\r\n      this.changeOn(i,j);\r\n      for(let h=i-1;h<=i+1;h++)\r\n        this.changeOn(h,j);\r\n      for(let k=j-1;k<=j+1;k++)\r\n        this.changeOn(i,k)\r\n      // this.changeOn(i,j);\r\n      // this.changeOn(i+1,j);\r\n      // this.changeOn(i-1,j);\r\n      // this.changeOn(i,j-1);\r\n      // this.changeOn(i,j+1);\r\n      // var x = (this.state.current.every((e) => e.every((el)=> !el)));\r\n      // this.setState({gameWon: x});\r\n  }\r\n\r\n  render() {\r\n    var x = \"abcdefghijklmnopqrstuvwxyz\".split('');\r\n    if(this.state.gameWon){\r\n      return(\r\n        <div>\r\n        <h1 className=\"font-effect-neon\"><span style={{'color': 'purple',\r\n        'animation': 'blink 4s infinite'}}>You</span> <span style={{'color': 'red',\r\n          'animation': 'blink 7s infinite'}}>Won!</span></h1>\r\n          <button onClick={this.restartGame}>Play again?</button>\r\n        </div>\r\n        )\r\n    }\r\n    return(\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n          {this.state.current.map((el,i) => {\r\n            return(<td className=\"master\" key={x[i]}>\r\n              {el.map((ele,j) => {\r\n                return (<Box ons={ele} callme={this.changeNeighbours} index={{i:i,j:j}} key={`${i}-${j}`} />)\r\n              })}\r\n            </td>)\r\n          })}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n        /* Behind the scenes\r\n        <td className=\"master\">\r\n          <Box ons={this.state.current[0][0]} callme={this.changeOn} index={{i:0,j:0}}/>\r\n          <Box />\r\n          <Box />\r\n        </td> */\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React,{Component} from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass App extends Component{\nrender(){\n  return (\n    <div className=\"App\">\n      <h1 className=\"font-effect-neon\"><span style={{'color': 'orange',\n        'animation': 'blink 4s infinite'}}>Lights</span> <span style={{'color': 'blue',\n        'animation': 'blink 6s infinite'}}>Out</span></h1>\n      <Board />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}